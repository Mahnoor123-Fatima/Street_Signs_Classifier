# -*- coding: utf-8 -*-
"""Street_Signs_Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yiY6-dvf-1FMZNe-r9kIgp3R9gvtwqCV
"""

!git clone https://bitbucket.org/jadslim/german-traffic-signs.git

#how we unpickle data

import pickle

#how to open files in python
with open('/content/german-traffic-signs/train.p','rb') as f:    #rb means read biinary format.
  train_data = pickle.load(f)                                    #f is pointer
with open('/content/german-traffic-signs/test.p','rb') as f:
  test_data = pickle.load(f)    
with open('/content/german-traffic-signs/valid.p','rb') as f:
  valid_data = pickle.load(f)

type(train_data)

#now we have to extract the dictionary and unpikle the data now this can be done as:
x_train,y_train = train_data['features'],train_data['labels']
x_test,y_test = test_data['features'],test_data['labels']
x_valid,y_valid = valid_data['features'],valid_data['labels']

x_train.shape

x_test.shape

x_valid.shape

import pandas as pd

data = pd.read_csv('german-traffic-signs/signnames.csv')

print(data)

import matplotlib.pyplot as plt

plt.imshow(x_train[0])

print(y_train[0])

#preprocessing of image
import cv2

def gray(img):
  img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  return img

def equalize(img):
  img = cv2.equalizeHist(img)
  return img
  #equalize histogram extract reigon of interest very correctly

def preprocess(img):
  img = gray(img)
  img = equalize(img)
  img = img/255
  return img

import numpy as np

x_train = np.array(list(map(preprocess, x_train )))
x_test = np.array(list(map(preprocess, x_test )))
x_valid = np.array(list(map(preprocess, x_valid )))

plt.imshow(x_train[0])
print(x_train.shape)

from tensorflow.keras.utils import to_categorical

y_train = to_categorical(y_train, 43)
y_test = to_categorical(y_test, 43)
y_valid = to_categorical(y_valid, 43)

x_train = x_train.reshape(34799, 32, 32 ,1)
x_test = x_test.reshape(12630, 32, 32 ,1)
x_valid = x_valid.reshape(4410, 32, 32 ,1)

from tensorflow.keras.layers import Conv2D, Flatten, MaxPooling2D, Dense, Dropout

from tensorflow.keras.models import Sequential

model = Sequential()

model = Sequential()
model.add(Conv2D(32,(5,5),input_shape=(32,32,1),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(15,(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(500,activation='relu')) 
model.add(Dropout(0.4))
model.add(Dense(43,activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

model.summary()

model.fit(x_train,y_train,epochs=50,batch_size=400,verbose=1,shuffle=1)

predictions = model.predict_classes(x_test)

predictions[0]

y_test[0]

predictions[0]

y_test = np.argmax(y_test, axis=1)

y_test[0]

from sklearn.metrics import classification_report

print(classification_report(y_test,predictions))

model.save('street_signs_classifier.h5')